/**
 * Copyright 2015 @ to2.net.
 * name : tcpserve.go
 * author : jarryliu
 * date : 2015-11-23 14:19
 * description :
 * history :
 */
package tcpserve

import (
	"bufio"
	"errors"
	"github.com/gomodule/redigo/redis"
	"github.com/ixre/gof"
	"go2o-web/src/app/util"
	"go2o/core"
	"go2o/core/service/rsi"
	"log"
	"net"
	"strconv"
	"strings"
	"time"
)

type (
	TcpReceiveCaller func(conn net.Conn, read []byte) ([]byte, error)
	SocketCmdHandler func(ci *ClientIdentity, plan string) ([]byte, error)
// the identity of client
	ClientIdentity struct {
		Id              int // client id
		UserId          int // user id
		Addr            net.Addr
		Conn            net.Conn
		ConnectTime     time.Time
		LastConnectTime time.Time
	}
)

var (
	DebugOn bool = false
	ReadDeadLine time.Duration = time.Second * 300
	clients      map[string]*ClientIdentity = make(map[string]*ClientIdentity) //客户端身份
	userAddrs        map[int]string = make(map[int]string) //用户的IP信息,以同时下发到多个客户端
	handlers     map[string]SocketCmdHandler = map[string]SocketCmdHandler{
		"MAUTH": cliMAuth,
		"PRINT": cliPrint,
		"MGET":  cliMGet,
		"PING":  cliPing,
	}
)

func printf(force bool, format string, args ...interface{}) {
	if DebugOn {
		log.Printf(format + "\n", args...)
	}
}

func listen(addr string, rc TcpReceiveCaller) {
	serveAddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		panic(err)
	}
	listen, err := net.ListenTCP("tcp", serveAddr)
	for {
		if conn, err := listen.AcceptTCP(); err == nil {
			printf(true, "[ CLIENT][ CONNECT] - new client connection IP: %s ; active clients : %d",
				conn.RemoteAddr().String(), len(clients) + 1)
			go receiveTcpConn(conn, rc)
		}
	}
}

func receiveTcpConn(conn *net.TCPConn, rc TcpReceiveCaller) {
	const delim byte = '\n'
	for {
		buf := bufio.NewReader(conn)
		line, err := buf.ReadBytes(delim)
		if err != nil {
			addr := conn.RemoteAddr().String()
			//新的用户进来,清理用户上次的数据
			//一个用户可能通过不同的地址连接
			if v, ok := clients[addr]; ok {
				uid := v.UserId
				delete(clients, addr)
				addr2 := userAddrs[uid] //获取用户所有的客户端地址
				if strings.Index(addr2, "$") == -1 {
					delete(userAddrs, uid)
				} else {
					addr2 = strings.Replace(addr2, addr, "", 1)
					userAddrs[uid] = strings.Replace(addr2, "$$", "$", -1)
				}
			}
			printf(true, "[ CLIENT][ DISCONN] - IP : %s disconnect!active clients : %d",
				conn.RemoteAddr().String(), len(clients))
			break

		}

		if d, err := rc(conn, line[:len(line) - 1]); err != nil {
			// remove '\n'
			conn.Write([]byte("error$" + err.Error()))
		} else if d != nil {
			conn.Write(d)
		}

		conn.Write([]byte{delim})
		conn.SetReadDeadline(time.Now().Add(ReadDeadLine)) // discount after 5m
	}
}

func ListenTcp(addr string) {
	serveLoop() // server loop,send some message to client
	listen(addr, func(conn net.Conn, b []byte) ([]byte, error) {
		cmd := string(b)
		id, ok := clients[conn.RemoteAddr().String()]
		if !ok {
			// auth
			if err := createConnection(conn, cmd); err != nil {
				return nil, err
			}
			return []byte("ok"), nil
		}
		if !strings.HasPrefix(cmd, "PING") {
			printf(false, "[ CLIENT][ MESSAGE] - send by %d ; %s", id.Id, cmd)
		}
		return handleSocketCmd(id, cmd)
	})
}

// Add socket command handler
func AddHandler(cmd string, handler SocketCmdHandler) {
	handlers[cmd] = handler
}

// create partner connection
func createConnection(conn net.Conn, line string) error {
	if strings.HasPrefix(line, "AUTH:") {
		arr := strings.Split(line[5:], "#") // AUTH:API_ID#SECRET#VERSION
		if len(arr) == 3 {
			merchantId := dps.MerchantService.GetMerchantIdByApiId(arr[0])
			apiInfo := dps.MerchantService.GetApiInfo(merchantId)

			if apiInfo != nil && apiInfo.ApiSecret == arr[1] {
				if apiInfo.Enabled == 0 {
					return errors.New("api has exipres")
				}
				now := time.Now()
				cli := &ClientIdentity{
					Id:              merchantId,
					Addr:            conn.RemoteAddr(),
					Conn:            conn,
					ConnectTime:     now,
					LastConnectTime: now,
				}
				clients[conn.RemoteAddr().String()] = cli
				printf(true, "[ CLIENT][ AUTH] - auth success! client id = %d ; version = %s", merchantId, arr[2])
				return nil
			}
		}
	}
	return errors.New("conn reject")
}

func handleSocketCmd(ci *ClientIdentity, cmd string) ([]byte, error) {
	i := strings.Index(cmd, ":")
	if i != -1 {
		plan := cmd[i + 1:]
		if v, ok := handlers[cmd[:i]]; ok {
			return v(ci, plan)
		}
	}
	return nil, errors.New("unknown command:" + cmd)
}

func serveLoop() {
	conn := core.GetRedisConn()
	go notifyMup(conn)
}

func notifyMup(conn redis.Conn) {
	for {
		err := mmSummaryNotify(conn)
		err1 := mmAccountNotify(conn)
		if err != nil || err1 != nil {
			time.Sleep(time.Second * 1) //阻塞,避免轮询占用CPU
		}
	}
}

// member auth,command like 'MAUTH:jarrysix#3234234242342342'
func cliMAuth(id *ClientIdentity, param string) ([]byte, error) {
	arr := strings.Split(param, "#")
	if len(arr) == 2 {
		memberId, _ := strconv.Atoi(arr[0])
		b := util.CompareMemberApiToken(gof.CurrentApp.Storage(),
			memberId, arr[1])
		b = true
		if b {
			// auth success
			id.UserId = memberId
			// bind user activated clients
			if v, ok := userAddrs[id.UserId]; ok {
				userAddrs[id.UserId] = v + "$" + id.Addr.String()
			} else {
				userAddrs[id.UserId] = id.Addr.String()
			}
			return []byte("ok"), nil
		}
	}
	return nil, errors.New("auth fail")
}

// print text by client sending.
func cliPrint(id *ClientIdentity, params string) ([]byte, error) {
	return []byte(params), nil
}

func cliPing(id *ClientIdentity, plan string) ([]byte, error) {
	return []byte("PONG"), nil
}
