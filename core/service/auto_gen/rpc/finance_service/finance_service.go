// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package finance_service

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/auto_gen/rpc/ttype"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__
type FinanceService interface {
  // Parameters:
  //  - PersonId
  //  - TransferWith
  //  - Amount
  RiseTransferIn(ctx context.Context, personId int64, transferWith int32, amount float64) (r *ttype.Result_, err error)
}

type FinanceServiceClient struct {
  c thrift.TClient
}

func NewFinanceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FinanceServiceClient {
  return &FinanceServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewFinanceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FinanceServiceClient {
  return &FinanceServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewFinanceServiceClient(c thrift.TClient) *FinanceServiceClient {
  return &FinanceServiceClient{
    c: c,
  }
}

func (p *FinanceServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - PersonId
//  - TransferWith
//  - Amount
func (p *FinanceServiceClient) RiseTransferIn(ctx context.Context, personId int64, transferWith int32, amount float64) (r *ttype.Result_, err error) {
  var _args0 FinanceServiceRiseTransferInArgs
  _args0.PersonId = personId
  _args0.TransferWith = transferWith
  _args0.Amount = amount
  var _result1 FinanceServiceRiseTransferInResult
  if err = p.Client_().Call(ctx, "RiseTransferIn", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type FinanceServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FinanceService
}

func (p *FinanceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FinanceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FinanceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFinanceServiceProcessor(handler FinanceService) *FinanceServiceProcessor {

  self2 := &FinanceServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["RiseTransferIn"] = &financeServiceProcessorRiseTransferIn{handler:handler}
return self2
}

func (p *FinanceServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type financeServiceProcessorRiseTransferIn struct {
  handler FinanceService
}

func (p *financeServiceProcessorRiseTransferIn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FinanceServiceRiseTransferInArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RiseTransferIn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FinanceServiceRiseTransferInResult{}
var retval *ttype.Result_
  var err2 error
  if retval, err2 = p.handler.RiseTransferIn(ctx, args.PersonId, args.TransferWith, args.Amount); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RiseTransferIn: " + err2.Error())
    oprot.WriteMessageBegin("RiseTransferIn", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RiseTransferIn", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PersonId
//  - TransferWith
//  - Amount
type FinanceServiceRiseTransferInArgs struct {
  PersonId int64 `thrift:"personId,1" db:"personId" json:"personId"`
  TransferWith int32 `thrift:"transferWith,2" db:"transferWith" json:"transferWith"`
  Amount float64 `thrift:"amount,3" db:"amount" json:"amount"`
}

func NewFinanceServiceRiseTransferInArgs() *FinanceServiceRiseTransferInArgs {
  return &FinanceServiceRiseTransferInArgs{}
}


func (p *FinanceServiceRiseTransferInArgs) GetPersonId() int64 {
  return p.PersonId
}

func (p *FinanceServiceRiseTransferInArgs) GetTransferWith() int32 {
  return p.TransferWith
}

func (p *FinanceServiceRiseTransferInArgs) GetAmount() float64 {
  return p.Amount
}
func (p *FinanceServiceRiseTransferInArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FinanceServiceRiseTransferInArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PersonId = v
}
  return nil
}

func (p *FinanceServiceRiseTransferInArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TransferWith = v
}
  return nil
}

func (p *FinanceServiceRiseTransferInArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *FinanceServiceRiseTransferInArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RiseTransferIn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FinanceServiceRiseTransferInArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("personId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:personId: ", p), err) }
  if err := oprot.WriteI64(int64(p.PersonId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.personId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:personId: ", p), err) }
  return err
}

func (p *FinanceServiceRiseTransferInArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transferWith", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transferWith: ", p), err) }
  if err := oprot.WriteI32(int32(p.TransferWith)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transferWith (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transferWith: ", p), err) }
  return err
}

func (p *FinanceServiceRiseTransferInArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err) }
  return err
}

func (p *FinanceServiceRiseTransferInArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FinanceServiceRiseTransferInArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FinanceServiceRiseTransferInResult struct {
  Success *ttype.Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFinanceServiceRiseTransferInResult() *FinanceServiceRiseTransferInResult {
  return &FinanceServiceRiseTransferInResult{}
}

var FinanceServiceRiseTransferInResult_Success_DEFAULT *ttype.Result_
func (p *FinanceServiceRiseTransferInResult) GetSuccess() *ttype.Result_ {
  if !p.IsSetSuccess() {
    return FinanceServiceRiseTransferInResult_Success_DEFAULT
  }
return p.Success
}
func (p *FinanceServiceRiseTransferInResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FinanceServiceRiseTransferInResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FinanceServiceRiseTransferInResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FinanceServiceRiseTransferInResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RiseTransferIn_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FinanceServiceRiseTransferInResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FinanceServiceRiseTransferInResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FinanceServiceRiseTransferInResult(%+v)", *p)
}


