// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package item_service

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"go2o/core/service/auto_gen/rpc/ttype"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = ttype.GoUnusedProtection__
type ItemService interface {
  // Parameters:
  //  - ItemId
  //  - SkuId
  GetSku(ctx context.Context, itemId int64, skuId int64) (r *ttype.SSku, err error)
  // Parameters:
  //  - ItemId
  GetItemSkuJson(ctx context.Context, itemId int64) (r string, err error)
  // Parameters:
  //  - ItemId
  //  - IType
  GetItemDetailData(ctx context.Context, itemId int64, iType int32) (r string, err error)
}

type ItemServiceClient struct {
  c thrift.TClient
}

func NewItemServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ItemServiceClient {
  return &ItemServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewItemServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ItemServiceClient {
  return &ItemServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewItemServiceClient(c thrift.TClient) *ItemServiceClient {
  return &ItemServiceClient{
    c: c,
  }
}

func (p *ItemServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ItemId
//  - SkuId
func (p *ItemServiceClient) GetSku(ctx context.Context, itemId int64, skuId int64) (r *ttype.SSku, err error) {
  var _args0 ItemServiceGetSkuArgs
  _args0.ItemId = itemId
  _args0.SkuId = skuId
  var _result1 ItemServiceGetSkuResult
  if err = p.Client_().Call(ctx, "GetSku", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - ItemId
func (p *ItemServiceClient) GetItemSkuJson(ctx context.Context, itemId int64) (r string, err error) {
  var _args2 ItemServiceGetItemSkuJsonArgs
  _args2.ItemId = itemId
  var _result3 ItemServiceGetItemSkuJsonResult
  if err = p.Client_().Call(ctx, "GetItemSkuJson", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - ItemId
//  - IType
func (p *ItemServiceClient) GetItemDetailData(ctx context.Context, itemId int64, iType int32) (r string, err error) {
  var _args4 ItemServiceGetItemDetailDataArgs
  _args4.ItemId = itemId
  _args4.IType = iType
  var _result5 ItemServiceGetItemDetailDataResult
  if err = p.Client_().Call(ctx, "GetItemDetailData", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

type ItemServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ItemService
}

func (p *ItemServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ItemServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ItemServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewItemServiceProcessor(handler ItemService) *ItemServiceProcessor {

  self6 := &ItemServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["GetSku"] = &itemServiceProcessorGetSku{handler:handler}
  self6.processorMap["GetItemSkuJson"] = &itemServiceProcessorGetItemSkuJson{handler:handler}
  self6.processorMap["GetItemDetailData"] = &itemServiceProcessorGetItemDetailData{handler:handler}
return self6
}

func (p *ItemServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type itemServiceProcessorGetSku struct {
  handler ItemService
}

func (p *itemServiceProcessorGetSku) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ItemServiceGetSkuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetSku", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ItemServiceGetSkuResult{}
var retval *ttype.SSku
  var err2 error
  if retval, err2 = p.handler.GetSku(ctx, args.ItemId, args.SkuId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSku: " + err2.Error())
    oprot.WriteMessageBegin("GetSku", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetSku", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type itemServiceProcessorGetItemSkuJson struct {
  handler ItemService
}

func (p *itemServiceProcessorGetItemSkuJson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ItemServiceGetItemSkuJsonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetItemSkuJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ItemServiceGetItemSkuJsonResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetItemSkuJson(ctx, args.ItemId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetItemSkuJson: " + err2.Error())
    oprot.WriteMessageBegin("GetItemSkuJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetItemSkuJson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type itemServiceProcessorGetItemDetailData struct {
  handler ItemService
}

func (p *itemServiceProcessorGetItemDetailData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ItemServiceGetItemDetailDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetItemDetailData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ItemServiceGetItemDetailDataResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetItemDetailData(ctx, args.ItemId, args.IType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetItemDetailData: " + err2.Error())
    oprot.WriteMessageBegin("GetItemDetailData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetItemDetailData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ItemId
//  - SkuId
type ItemServiceGetSkuArgs struct {
  ItemId int64 `thrift:"itemId,1" db:"itemId" json:"itemId"`
  SkuId int64 `thrift:"skuId,2" db:"skuId" json:"skuId"`
}

func NewItemServiceGetSkuArgs() *ItemServiceGetSkuArgs {
  return &ItemServiceGetSkuArgs{}
}


func (p *ItemServiceGetSkuArgs) GetItemId() int64 {
  return p.ItemId
}

func (p *ItemServiceGetSkuArgs) GetSkuId() int64 {
  return p.SkuId
}
func (p *ItemServiceGetSkuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetSkuArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *ItemServiceGetSkuArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SkuId = v
}
  return nil
}

func (p *ItemServiceGetSkuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetSku_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetSkuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemId: ", p), err) }
  return err
}

func (p *ItemServiceGetSkuArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("skuId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skuId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SkuId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skuId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skuId: ", p), err) }
  return err
}

func (p *ItemServiceGetSkuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetSkuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ItemServiceGetSkuResult struct {
  Success *ttype.SSku `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemServiceGetSkuResult() *ItemServiceGetSkuResult {
  return &ItemServiceGetSkuResult{}
}

var ItemServiceGetSkuResult_Success_DEFAULT *ttype.SSku
func (p *ItemServiceGetSkuResult) GetSuccess() *ttype.SSku {
  if !p.IsSetSuccess() {
    return ItemServiceGetSkuResult_Success_DEFAULT
  }
return p.Success
}
func (p *ItemServiceGetSkuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ItemServiceGetSkuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetSkuResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ttype.SSku{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ItemServiceGetSkuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetSku_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetSkuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ItemServiceGetSkuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetSkuResult(%+v)", *p)
}

// Attributes:
//  - ItemId
type ItemServiceGetItemSkuJsonArgs struct {
  ItemId int64 `thrift:"itemId,1" db:"itemId" json:"itemId"`
}

func NewItemServiceGetItemSkuJsonArgs() *ItemServiceGetItemSkuJsonArgs {
  return &ItemServiceGetItemSkuJsonArgs{}
}


func (p *ItemServiceGetItemSkuJsonArgs) GetItemId() int64 {
  return p.ItemId
}
func (p *ItemServiceGetItemSkuJsonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetItemSkuJsonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *ItemServiceGetItemSkuJsonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetItemSkuJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetItemSkuJsonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemId: ", p), err) }
  return err
}

func (p *ItemServiceGetItemSkuJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetItemSkuJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ItemServiceGetItemSkuJsonResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemServiceGetItemSkuJsonResult() *ItemServiceGetItemSkuJsonResult {
  return &ItemServiceGetItemSkuJsonResult{}
}

var ItemServiceGetItemSkuJsonResult_Success_DEFAULT string
func (p *ItemServiceGetItemSkuJsonResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ItemServiceGetItemSkuJsonResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ItemServiceGetItemSkuJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ItemServiceGetItemSkuJsonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetItemSkuJsonResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ItemServiceGetItemSkuJsonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetItemSkuJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetItemSkuJsonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ItemServiceGetItemSkuJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetItemSkuJsonResult(%+v)", *p)
}

// Attributes:
//  - ItemId
//  - IType
type ItemServiceGetItemDetailDataArgs struct {
  ItemId int64 `thrift:"itemId,1" db:"itemId" json:"itemId"`
  IType int32 `thrift:"iType,2" db:"iType" json:"iType"`
}

func NewItemServiceGetItemDetailDataArgs() *ItemServiceGetItemDetailDataArgs {
  return &ItemServiceGetItemDetailDataArgs{}
}


func (p *ItemServiceGetItemDetailDataArgs) GetItemId() int64 {
  return p.ItemId
}

func (p *ItemServiceGetItemDetailDataArgs) GetIType() int32 {
  return p.IType
}
func (p *ItemServiceGetItemDetailDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetItemDetailDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemId = v
}
  return nil
}

func (p *ItemServiceGetItemDetailDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IType = v
}
  return nil
}

func (p *ItemServiceGetItemDetailDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetItemDetailData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetItemDetailDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemId: ", p), err) }
  return err
}

func (p *ItemServiceGetItemDetailDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iType: ", p), err) }
  if err := oprot.WriteI32(int32(p.IType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iType: ", p), err) }
  return err
}

func (p *ItemServiceGetItemDetailDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetItemDetailDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ItemServiceGetItemDetailDataResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemServiceGetItemDetailDataResult() *ItemServiceGetItemDetailDataResult {
  return &ItemServiceGetItemDetailDataResult{}
}

var ItemServiceGetItemDetailDataResult_Success_DEFAULT string
func (p *ItemServiceGetItemDetailDataResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ItemServiceGetItemDetailDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ItemServiceGetItemDetailDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ItemServiceGetItemDetailDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemServiceGetItemDetailDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ItemServiceGetItemDetailDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetItemDetailData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemServiceGetItemDetailDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ItemServiceGetItemDetailDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemServiceGetItemDetailDataResult(%+v)", *p)
}


